name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, closed, edited]

jobs:
  link-asana:
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'release'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install requests
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Add comment to linked asana task and tag the ticket on merge
        uses: jannekem/run-python-script-action@v1
        env:
          ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          PULL_REQUEST_NAME: ${{ github.event.pull_request.body }}
          GIT_TO_REF: ${{ github.event.pull_request.base.ref }}
          GIT_FROM_REF: ${{ github.event.pull_request.head.ref }}
          REPO_NAME: ${{ github.event.pull_request.base.repo.name }}
          GIT_PR_LINK: ${{ github.event.pull_request._links.html.href }}
          GIT_COMMIT_SHA: ${{ github.event.pull_request._links.statuses.href }}
          IS_MERGE: ${{ github.event.pull_request.merged }}
        with:
          script: |
            import requests, os, re
            
            # FETCH ALL TAGS FIRST
            git_username = "abhisheks-prophecy"
            git_workspace = "SimpleDataLabsInc"
            git_key = os.environ.get("GIT_ACCESS_TOKEN")
            assert git_key, "Git key is not present. Please provide env variable GIT_ACCESS_TOKEN"
            repo_name = os.environ.get("REPO_NAME")
            assert repo_name, "Repo name is not present. Please provide env variable REPO_NAME"
            all_git_tags_response = requests.get("https://api.github.com/repos/{0}/{1}/tags".format(git_workspace, repo_name), 
              headers = {"Accept": "application/vnd.github.v3+json"}, auth=(git_username, git_key)
            )
            assert all_git_tags_response.status_code == 200, "Git tag response is non 200. Got is: {0}".format(all_git_tags_response.status_code)
            all_git_tags = all_git_tags_response.json()
            print("All tags are: {0}".format(all_git_tags))
            assert len(all_git_tags) > 0, "The tags list is empty. Got is: {0}".format(all_git_tags)
            
            # FETCHING GENERATE VERSION INFORMATION
            tag_version_sequence = []
            for given_tag in all_git_tags:
              match = re.match("^[rv]{0,1}[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$", given_tag["name"], re.M|re.I)
              if match is not None:
                tag_version_sequence = [int(re.sub("[^0-9]", "", item)) for item in given_tag["name"].split(".")]
                break
            print("Tag sequence got is: {0}".format(tag_version_sequence))
            assert len(tag_version_sequence) == 3, "The tag sequence fetched is incorrect format. Got is: {0}".format(tag_version_sequence)
            
            next_major_version = tag_version_sequence[1] + 1
            next_minor_version = tag_version_sequence[2] + 1
            print("Next major version: {0}, minor version: {1}".format(next_major_version, next_minor_version))
            
            pr_against_branch = os.environ.get("GIT_TO_REF")
            print("PR is raised against branch: {0}".format(pr_against_branch))
            
            # ADD TAG TO ASANA TICKET
            asana_version = ""
            if pr_against_branch in ["master"]:
              print("Merge against master so will update major version")
              asana_version = "{0}.{1}.0".format(tag_version_sequence[0], next_major_version)
            elif pr_against_branch in ["release"]:
              print("Merge against release so will update minor version")
              asana_version = "{0}.{1}.{2}".format(tag_version_sequence[0], tag_version_sequence[1], next_minor_version)
            print("Asana version to tag with: {0}".format(asana_version))
            assert asana_version, "Asana version got is: {0}".format(asana_version)
            print("PR name got is: {0}".format(os.environ.get("PULL_REQUEST_NAME")))
            asana_ticket_ids = os.environ.get("PULL_REQUEST_NAME").split("Asana Ticket Links: <<")[1].split(">>")[0].strip("() ").split(",")
            print("Asana ticket ID that will get tagged: {0}".format(asana_ticket_ids))
            assert asana_ticket_ids, "Asana tickets got is: {0}".format(asana_ticket_ids)
            
            real_fix_made = os.environ.get("PULL_REQUEST_NAME").split("### Fix Made (MANDATORY)")[1].split("### Asana Ticket")[0].strip().strip("<<Short Description>>")
            print("Fix made is: {0}".format(real_fix_made))
            assert real_fix_made, "Fix made section is empty"
            
            asana_base_url = "https://app.asana.com/api/1.0"
            asana_key = os.environ.get("ASANA_ACCESS_TOKEN")
            headers = {"Accept": "application/json","Content-Type":"application/json", "Authorization": "Bearer {0}".format(asana_key)}
            
            is_merged = os.environ.get("IS_MERGE")
            git_pr_link = os.environ.get("GIT_PR_LINK")
            git_commit_sha = os.environ.get("GIT_COMMIT_SHA").split("/")[-1]
            git_commit_link = "{0}/commits/{1}".format(git_pr_link, git_commit_sha)
            comment = "Fix: {0}\nNew change: {1}\nPull request: {2}".format(real_fix_made, git_commit_link, git_pr_link)
            if is_merged == "true":
              comment = "{0}\nPR is merged.".format(comment)
            
            for asana_ticket_id_item in asana_ticket_ids:
              asana_ticket_id = asana_ticket_id_item.split("/")[-1]
              if (len(str(asana_ticket_id)) < 2 and len(asana_ticket_id_item.split("/")) > 1):
                asana_ticket_id = asana_ticket_id_item.split("/")[-2]
              print("Adding comment to ticket id: {0}".format(asana_ticket_id))
              response = requests.post("{0}/tasks/{1}/stories".format(asana_base_url, asana_ticket_id), json={"data": {"is_pinned": False,"text": comment}}, headers=headers)
              assert response.status_code in [200, 201], "Response for add comment to ASANA is not 200. Got is: {0}".format(response.__dict__)
              print("Successfully added comment:\n{0}\nTo asana ticket {1}".format(comment, asana_ticket_id))
            
            if is_merged == "true":
              print("Adding tag since it is a merge request.")
              all_tags = requests.get("{0}/tags".format(asana_base_url), headers=headers).json()
              tag_id = [tag["gid"] for tag in all_tags["data"] if tag["name"] == asana_version]
              if len(tag_id) == 0:
                print("The tag with name {0} does not exist. Creating it.".format(asana_version))
                response = requests.get("{0}/workspaces".format(asana_base_url), headers=headers)
                assert response.status_code == 200, "Getting workspaces failed. Response: {0}".format(response__dict__)
                workspace_id = response.json()["data"][0]["gid"]
                print("Workspace id fetched is: {0}".format(workspace_id))
                create_tag_data = {"data": {"color": "light-green", "name": asana_version, "notes": "Release tag for {0}".format(asana_version), "workspace": workspace_id}}
                response = requests.post("{0}/tags".format(asana_base_url), json=create_tag_data, headers=headers)
                assert response.status_code in [200, 201], "Create tag request failed. Response: {0}".format(response.__dict__)
                tag_id = response.json()["data"]["gid"]
              else:
                print("Tag exists already so attaching the same tag to the ticket.")
                tag_id = tag_id[0]
              for asana_ticket_id_item in asana_ticket_ids:
                asana_ticket_id = asana_ticket_id_item.split("/")[-1]
                print("Adding tag to ticket id: {0}".format(asana_ticket_id))
                response = requests.post("{0}/tasks/{1}/addTag".format(asana_base_url, asana_ticket_id), json={"data": {"tag": tag_id}}, headers=headers)
                assert response.status_code == 200, "Response for add tag is not 200. Got is: {0}".format(response.__dict__)
                print("Successfully added tag {0} to asana ticket {1}".format(asana_version, asana_ticket_id))
            
                response = requests.put("{0}/tasks/{1}".format(asana_base_url, asana_ticket_id), json={"data": {"completed": True}}, headers=headers)
                assert response.status_code == 200, "Response for completed task not 200. Got is: {0}".format(response.__dict__)
                print("Successfully marked completed asana ticket {0}".format(asana_ticket_id))
            else:
              print("Did not attach tag and did status update to the asana ticket as it is not a merge request.")
