name: Pull Request

on:
  pull_request:
    types: [closed]

jobs:
  add-tag:
    runs-on: ubuntu-latest
    if: (github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'release') && (github.event.pull_request.merged == true)
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install requests
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Add tag to asana ticket
        uses: jannekem/run-python-script-action@v1
        env:
          ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          PULL_REQUEST_NAME: ${{ github.event.pull_request.body }}
          GIT_TO_REF: ${{ github.event.pull_request.base.ref }}
          GIT_FROM_REF: ${{ github.event.pull_request.head.ref }}
          REPO_NAME: ${{ github.event.pull_request.base.repo.name }}
        with:
          script: |
            import requests, os, re
            
            # FETCH ALL TAGS FIRST
            git_username = "abhisheksr8"
            git_key = os.environ.get("GIT_ACCESS_TOKEN")
            assert git_key, "Git key is not present. Please provide env variable GIT_ACCESS_TOKEN"
            repo_name = os.environ.get("REPO_NAME")
            assert repo_name, "Repo name is not present. Please provide env variable REPO_NAME"
            all_git_tags_response = requests.get("https://api.github.com/repos/{0}/{1}/tags".format(git_username, repo_name), 
              headers = {"Accept": "application/vnd.github.v3+json"}, auth=(git_username, git_key)
            )
            assert all_git_tags_response.status_code == 200, "Git tag response is non 200. Got is: {0}".format(all_git_tags_response.status_code)
            all_git_tags = all_git_tags_response.json()
            print("All tags are: {0}".format(all_git_tags))
            assert len(all_git_tags) > 0, "The tags list is empty. Got is: {0}".format(all_git_tags)
            
            # FETCHING GENERATE VERSION INFORMATION
            tag_version_sequence = []
            for given_tag in all_git_tags:
              match = re.match("^[rv]{0,1}[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$", given_tag["name"], re.M|re.I)
              if match is not None:
                tag_version_sequence = [int(re.sub("[^0-9]", "", item)) for item in given_tag["name"].split(".")]
                break
            print("Tag sequence got is: {0}".format(tag_version_sequence))
            assert len(tag_version_sequence) == 3, "The tag sequence fetched is incorrect format. Got is: {0}".format(tag_version_sequence)
            
            next_major_version = tag_version_sequence[1] + 1
            next_minor_version = tag_version_sequence[2] + 1
            print("Next major version: {0}, minor version: {1}".format(next_major_version, next_minor_version))
            
            pr_against_branch = os.environ.get("GIT_TO_REF")
            print("PR is raised against branch: {0}".format(pr_against_branch))
            
            # ADD TAG TO ASANA TICKET
            asana_version = ""
            if pr_against_branch in ["master"]:
              print("Merge against master so will update major version")
              asana_version = "{0}.{1}.0".format(tag_version_sequence[0], next_major_version)
            elif pr_against_branch in ["release"]:
              print("Merge against release so will update minor version")
              asana_version = "{0}.{1}.{2}".format(tag_version_sequence[0], tag_version_sequence[1], next_minor_version)
            print("Asana version to tag with: {0}".format(asana_version))
            assert asana_version, "Asana version got is: {0}".format(asana_version)
            print("PR name got is: {0}".format(os.environ.get("PULL_REQUEST_NAME")))
            asana_ticket_id = os.environ.get("PULL_REQUEST_NAME").split("app.asana.com")[1].split("/")[-1].split(">>")[0].strip("() ")
            print("Asana ticket ID that will get tagged: {0}".format(asana_ticket_id))
            assert asana_ticket_id, "Asana ticket got is: {0}".format(asana_ticket_id)
            asana_base_url = "https://app.asana.com/api/1.0"
            asana_key = os.environ.get("ASANA_ACCESS_TOKEN")
            headers = {"Accept": "application/json","Content-Type":"application/json", "Authorization": "Bearer {0}".format(asana_key)}
            all_tags = requests.get("{0}/tags".format(asana_base_url), headers=headers).json()
            tag_id = [tag["gid"] for tag in all_tags["data"] if tag["name"] == asana_version]
            if len(tag_id) == 0:
              print("The tag with name {0} does not exist. Creating it.".format(asana_version))
              response = requests.get("{0}/workspaces".format(asana_base_url), headers=headers)
              assert response.status_code == 200, "Getting workspaces failed. Response: {0}".format(response__dict__)
              workspace_id = response.json()["data"][0]["gid"]
              print("Workspace id fetched is: {0}".format(workspace_id))
              create_tag_data = {"data": {"color": "light-green", "name": asana_version, "notes": "Release tag for {0}".format(asana_version), "workspace": workspace_id}}
              response = requests.post("{0}/tags".format(asana_base_url), json=create_tag_data, headers=headers)
              assert response.status_code in [200, 201], "Create tag request failed. Response: {0}".format(response.__dict__)
              tag_id = response.json()["data"]["gid"]
            else:
              print("Tag exists already so attaching the same tag to the ticket.")
              tag_id = tag_id[0]
            response = requests.post("{0}/tasks/{1}/addTag".format(asana_base_url, asana_ticket_id), json={"data": {"tag": tag_id}}, headers=headers)
            assert response.status_code == 200, "Response for add tag is not 200. Got is: {0}".format(response.__dict__)
            print("Successfully added tag {0} to asana ticket {1}".format(asana_version, asana_ticket_id))
